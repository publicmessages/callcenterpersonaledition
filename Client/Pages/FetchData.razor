@page "/fetchdata"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using CallCenter.Shared
@using System.Diagnostics;
@attribute [Authorize]
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (stopwatch.ElapsedTicks > 0)
{
    <p>
        The data for this page was loaded in @stopwatch.ElapsedMilliseconds milliseconds.
    </p>
}
else
{
    <h1>States of the United States loading...</h1>
}
<p>
@if (states != null && states.Any())
{
foreach (LookupState state in states)
{
    <span>The abbreviation for @state.StateName is @state.StateCode. </span>
}
}
</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
{
    <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
}
        </tbody>
    </table>
}

@code {
private LookupState[]? states;
private Stopwatch stopwatch = Stopwatch.StartNew();
private WeatherForecast[]? forecasts;

protected override async Task OnInitializedAsync()
{
try
{
    forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
    stopwatch.Reset();
    stopwatch.Start();
    states = await Http.GetFromJsonAsync<LookupState[]>("LookupStates");
    stopwatch.Stop();
}
catch (AccessTokenNotAvailableException exception)
{
    exception.Redirect();
}
}
}
